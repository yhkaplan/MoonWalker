
{% macro declareProperties variables %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}
            let {{variable.name}}: {{variable.typeName}}
    {% endfor %}
{% endmacro %}

{% macro filloutInit variables %}
                {% map type.storedVariables into parameters using var %}{{ var.name }}: {{ var.name }}{% endmap %}
                {{ parameters|join:", " }}
{% endmacro %}

{% for type in types.types|!enum where type.implements.AutoTestable or type|annotated:"AutoTestable" %}
// sourcery:file:Generated/{{ type.name }}Tests
// MARK: - {{ type.name }} AutoTestable

import Quick
import Nimble
@testable import MoonWalker

class {{type.name}}Tests: QuickSpec {
    
    override func spec() {
    
        describe("{{type.name}}Tests") {
    
            {% call declareProperties type.storedVariables %}
            
            let sut = {{type.name}}(
                {% call filloutInit type.storedVariables %}
            )

        }
    }
}
// sourcery:end
{% endfor %}
